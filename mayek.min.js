jQuery(function($){

  if(window.innerWidth > window.innerHeight ){
    $("#hero-video").css("width", window.innerWidth);
    $("#hero-video").css("height", 'auto');
  }

  if(window.innerWidth <= window.innerHeight ){
    $("#hero-video").css("width", 'auto');
    $("#hero-video").css("height", window.innerHeight);
  }

	setTimeout(function(){
 document.getElementById('hero-video').classList.remove('hide');
}, 200);

//document.getElementById('hero-video').classList.remove('hide');
function landingcalc(){
   $(".tall-container1").css("height", (window.innerWidth/1.3)+window.innerHeight );
    $(".inner-container1").css("height", window.innerHeight );
    $(".outer-container1").css("min-height", window.innerHeight );
	$(".vid-container").css("height", window.innerHeight );
}
  landingcalc();
    var w3 = $(".text-sec3").width();	
	function sectioncalc(){
   var w2 = $(".text-container").width();
    $(".tall-container2").css("height", (w2 + window.innerHeight*1.5 + window.innerWidth+window.innerHeight));
     $(".tall-container3").css("height", (w3 + ($('.box-container5').width()*5)+ window.innerWidth +window.innerHeight));
		//$(".inner-container3").css("height", window.innerHeight );
		$(".outer-container2").css("min-height", window.innerHeight );
		$(".outer-container3").css("min-height", window.innerHeight );
}
sectioncalc();
   window.addEventListener('resize', sectioncalc);
  var scrollAnime = function(){
    $(".site-header").css("z-index", (-1));
    $(".text-container").css("left", window.innerWidth); 
    //Calculate tall containers
   
    var w5 = $(".text-sec5").height();
    $(".tall-container5").css("height", (window.innerHeight*3+window.innerHeight+w5*2));

$('.scroll').addClass('offup');
    $(window).on('scroll', function() {

      var scrollPos = $(window).scrollTop();
      if(scrollPos <= ((window.innerWidth/1.3))){
        $('.scroll').addClass('offup');
      }
      if(scrollPos > ((window.innerWidth/1.3))){
        $('.scroll').removeClass('offup');
      }
      if(scrollPos == ($(document).height()- window.innerHeight)){
        $('.scroll').addClass('offdown');
      }
      else{
        $('.scroll').removeClass('offdown');
      }

        var x1=((($(".inner-container1").offset().top)) - $(".tall-container1").offset().top);
        var x2=(Math.round((($(".inner-container2").offset().top)) - $(".tall-container2").offset().top));
        var x4=((($(".inner-container4").offset().top)) - $(".tall-container4").offset().top); 
console.log(x2)
        	$(".imgcol").css("position", 'absolute');
        	$(".imgcol").css("left", (window.innerWidth/2)-($(".imgcol").width())/2);
        	$(".imgcol-mob").css("position", 'absolute');
        	$(".imgcol-mob").css("left", (window.innerWidth/2)-($(".imgcol-mob").width())/2);
        	$(".textcol").css("position", 'absolute');
        	$(".textcol").css("left", ($(".s6cols").width()));
       if(window.innerWidth<=768) {
       if(x1>window.innerHeight/5) {
       	$(".site-header").css("z-index",1);
       }else{
       	$(".site-header").css("z-index",-1);
       }
   }
   else{
   	if(x1>window.innerHeight) {
       	$(".site-header").css("z-index",1);
       }else{
       	$(".site-header").css("z-index",-1);
       }
   }

   if(x4 == ($('.tall-container4').height()-window.innerHeight)){
    $(".site-header").css("visibility",'hidden');
   }
   else{
    $(".site-header").css("visibility",'visible');
   }

          $(".bars.b1").css("height", Math.round(x2/1.3));
          $(".bars.b2").css("height", x2);
          $(".bars.b3").css("height", Math.round(x2/1.5));
          $(".bars.b4").css("height", x2);

         if ($(".bars.b3").height()<=window.innerHeight){
        
          $(".text-container").css("left", window.innerWidth); 
          $(".letter").css("left", -($(".letter-container").width()));
        }
        else {
          $(".bars").css("height", window.innerHeight);
          $(".letter").css("left", Math.round(((x2-(window.innerHeight*2))-($(".letter-container").width()))/5));
          $(".text-container").css("left", window.innerWidth - (x2-window.innerHeight*1.5)); 
      }


        $(".scroll-container1").css("left", -x1);
    
	});
  }
scrollAnime();
//});

//progress bar



// mayek canvas
var canvas = document.querySelector('canvas');

var ctx = canvas.getContext('2d');
canvas.width = window.innerWidth*2;
canvas.height = window.innerHeight;

// lets get the resolution of our device.
var pixelRatio = window.devicePixelRatio || 1;


// lets scale the canvas and change its CSS width/height to make it high res.
canvas.style.width = canvas.width +'px';
canvas.style.height = canvas.height +'px';
canvas.width *= pixelRatio;
canvas.height *= pixelRatio;

ctx.setTransform(pixelRatio,0,0,pixelRatio,0,0);

//left rect
if (window.innerWidth < 768) {
	dx = (window.innerWidth/2)- ((500/pixelRatio)/2);
  dy = (window.innerHeight/2) - ((120/pixelRatio)/2);
  wx = 500/pixelRatio;
  wh = 120/pixelRatio;
}if (window.innerWidth >= 768 && window.innerWidth < 1366) {
	dx = (window.innerWidth/2)- ((500/pixelRatio)/2);
	dy =(window.innerHeight/2) - ((120/pixelRatio)/2);
	wx = 500/pixelRatio;
  wh = 120/pixelRatio;
}

if (window.innerWidth >= 1366) {
  if (pixelRatio == 1){
	dx = (window.innerWidth/2)- ((250/pixelRatio)/2);
	dy = (window.innerHeight/2) - ((60/pixelRatio)/2);
	wx = 250/pixelRatio;
  wh = 60/pixelRatio;
}
if (pixelRatio > 1){
  dx = (window.innerWidth/2)- ((250/pixelRatio)/2);
  dy = (window.innerHeight/2) - ((120/pixelRatio)/2);
  wx = 500/pixelRatio;
  wh = 120/pixelRatio;
}
}

var img = new Image();
img.src = "1-2-e1610021824320.png";
img.onload = function () {
ctx.save();	
ctx.fillStyle = '#02563ed4';
ctx.beginPath();
ctx.moveTo(0, 0);
ctx.lineTo(Math.ceil(window.innerWidth/1.5), 0);
ctx.lineTo(Math.ceil(window.innerWidth/3), window.innerHeight);
ctx.lineTo(0, window.innerHeight);
ctx.closePath();
ctx.fill();
//ctx.clip();
        ctx.drawImage(img, dx, dy, wx, wh);
        ctx.restore();
   

//right rect

ctx.save();	
ctx.fillStyle = '#02563ed4';
ctx.beginPath();
ctx.moveTo(window.innerWidth/1.5, 0);
ctx.lineTo(window.innerWidth, 0);
ctx.lineTo(window.innerWidth, window.innerHeight);
ctx.lineTo(window.innerWidth/3, window.innerHeight);
ctx.closePath();
ctx.fill();
//ctx.clip();
        ctx.drawImage(img, dx, dy, wx, wh);
        ctx.restore();

}
//progress bar


//var canvas = $("#paper")[0];
    
    
function line1(){
    var startX = window.innerWidth/1.5+(70/pixelRatio);
    var startY = -100/pixelRatio;
    var endX = window.innerWidth/3;
    var endY = window.innerHeight;
    var amount = .5;
    var anime =  setInterval(function() {
        amount -= 0.05; 
        ctx.save(); 
        ctx.strokeStyle = "#fff";
        ctx.lineWidth = .5; // percentage
        //c3.translate(0.5, 0.5);
        ctx.beginPath();
        ctx.lineCap = 'round';
        ctx.moveTo(startX + (endX - startX) * .5, startY + (endY - startY) * .5);
        ctx.lineTo(startX + (endX - startX) * amount , startY + (endY - startY) * amount);
        ctx.stroke();
        if(amount <= .1){
    clearInterval(anime);
    ctx.restore(); 
}

    },50);
  }

   function line2(){
    var startX = window.innerWidth/1.5-(70/pixelRatio);
    var startY = 100/pixelRatio;
    var endX = window.innerWidth/3;
    var endY = window.innerHeight;
    var amnt = .5;
    var anime2 =  setInterval(function() {
        amnt += 0.05; 
        ctx.save(); 
        ctx.strokeStyle = "#fff";
        ctx.lineWidth = .5; // percentage
        //c3.translate(0.5, 0.5);
        ctx.beginPath();
        ctx.lineCap = 'round';
        ctx.moveTo(startX + (endX - startX) * .5, startY + (endY - startY) * .5);
        ctx.lineTo(startX + (endX - startX) * amnt, startY + (endY - startY) * amnt);
        ctx.stroke();
        if(amnt > 1){
    clearInterval(anime2);
    ctx.restore(); 
}
       
    },50);
}
 line1();
 line2();



    
    

 
	
	$(window).on('scroll', function() {
	 var ctx = canvas.getContext('2d');
canvas.width = window.innerWidth*2;
canvas.height = window.innerHeight;

var pixelRatio = window.devicePixelRatio || 1;

// lets scale the canvas and change its CSS width/height to make it high res.
canvas.style.width = canvas.width +'px';
canvas.style.height = canvas.height +'px';
canvas.width *= pixelRatio;
canvas.height *= pixelRatio;

ctx.setTransform(pixelRatio,0,0,pixelRatio,0,0);

/*var anime = setInterval(function() {
        amount += 0.05; 
        ctx.globalCompositeOperation = "destination-out";
        ctx.strokeStyle = "#0000ff00";
        ctx.lineWidth = .1; // percentage
        //c3.translate(0.5, 0.5);
        ctx.beginPath();
        ctx.lineCap = 'round';
        ctx.moveTo(startX, startY);
        ctx.lineTo(startX + (endX - startX) * amount, startY + (endY - startY) * amount);
        ctx.stroke();
        if((startY + (endY - startY) * amount) > (window.innerHeight +300)){
    clearInterval(anime);
}
    },30);

if((($(".inner-container1").offset().top) - $(".tall-container1").offset().top)==0){

var anime = setInterval(function() {
        amount += 0.05; 
        ctx.globalCompositeOperation = "destination-out";
        ctx.strokeStyle = "white";
        ctx.lineWidth = .1; // percentage
        //c3.translate(0.5, 0.5);
        ctx.beginPath();
        ctx.lineCap = 'round';
        ctx.moveTo(startX, startY);
        ctx.lineTo(startX + (endX - startX) * amount, startY + (endY - startY) * amount);
        ctx.stroke();
        if((startY + (endY - startY) * amount) > (window.innerHeight +300)){
    clearInterval(anime);
}
    },30);
}*/
	

ctx.save();	
ctx.fillStyle = '#02563ed4';
ctx.beginPath();
ctx.moveTo(0, 0);
ctx.lineTo(Math.ceil(window.innerWidth/1.5), 0);
ctx.lineTo(Math.ceil(window.innerWidth/3), window.innerHeight);
ctx.lineTo(0, window.innerHeight);
ctx.closePath();
ctx.fill();
ctx.clip();
        ctx.drawImage(img, dx, dy, wx, wh);
        ctx.restore();

//right rect


	 
	 
 var movex= (($(".inner-container1").offset().top) - $(".tall-container1").offset().top)*2;
	
	var movex1 = (window.innerWidth/1.5) + movex;
	 var movex2 = window.innerWidth + movex;
		var movex3 = window.innerWidth + movex;
		var movex4 = (window.innerWidth/3) + movex;


var object = {
		x1: movex1,
	    x2: movex2,
	    x3: movex3,
	    x4: movex4
	}

ctx.save();	
ctx.fillStyle = '#02563ed4';
ctx.beginPath();
ctx.moveTo(object.x1, 0);
ctx.lineTo(object.x2, 0);
ctx.lineTo(object.x3, window.innerHeight);
ctx.lineTo(object.x4, window.innerHeight);
ctx.closePath();
ctx.fill();
ctx.clip();
        ctx.drawImage(img, (dx+movex), dy, wx, wh);
        ctx.restore();
        
 
 
 });

//SECTION 3
function section3(){
var b = document.querySelectorAll(".box-container");
for( var i=0 ; i<b.length ; i++){
	for( var j=0 ; j<3 ; j++){
		var bx = ['a','b','c'];
        b[i].appendChild(document.createElement("div")).className = "box" + (i+1) + bx[j];
}
}
var z =[];
for( var i=0 ; i<b.length ; i++){
	for( var j=0 ; j<3 ; j++){
       z.push(document.querySelectorAll(".box-container")[i].children[j]);

}
}


for( var m=0 ; m<z.length-1 ; m= m+3){
var c = (['#00734a','#02563e','#02382a']);
var	ht = divsum(100,3,15);
var y = 0;
for( var j=m ; j<(m+3) ; j++){
        z[j].style.height = ''+ ht[y]+ '%';
        z[j].style.background = ''+ c[y]+'';
        z[j].style.width = '100%';
        z[j].style.position = 'relative';
        //z[j].style.opacity = '.8';
        y++;
}
}






var sz = (($(".inner-container3").offset().top) - $(".tall-container3").offset().top)/10;

z[0].style.left = ''+sz+ 'px';
z[1].style.right = ''+sz+ 'px';
z[2].style.left = ''+sz+ 'px';
z[3].style.right = ''+sz+ 'px';
z[4].style.left = ''+sz+ 'px';
z[5].style.right = ''+sz+ 'px';
z[6].style.left = ''+sz+ 'px';
z[7].style.right = ''+sz+ 'px';
z[8].style.left = ''+sz+ 'px';
z[9].style.right = ''+sz+ 'px';
z[10].style.left = ''+sz+ 'px';
z[11].style.right = ''+sz+ 'px';
z[12].style.left = ''+sz+ 'px';
z[13].style.right = ''+sz+ 'px';
z[14].style.left = ''+sz+ 'px';

$(".text-sec3").css("left", window.innerWidth);
var zc= $(".text-sec3").css("left", window.innerWidth);

var relative = 0;
$(window).on('scroll', function() {
 var sz = Math.min(Math.round((($(".inner-container3").offset().top) - $(".tall-container3").offset().top)/5), $(".box-container").width());


z[0].style.left = ''+sz+ 'px';
z[1].style.right = ''+sz+ 'px';
z[2].style.left = ''+sz+ 'px';
z[3].style.right = ''+sz+ 'px';
z[4].style.left = ''+sz+ 'px';
z[5].style.right = ''+sz+ 'px';
z[6].style.left = ''+sz+ 'px';
z[7].style.right = ''+sz+ 'px';
z[8].style.left = ''+sz+ 'px';
z[9].style.right = ''+sz+ 'px';
z[10].style.left = ''+sz+ 'px';
z[11].style.right = ''+sz+ 'px';
z[12].style.left = ''+sz+ 'px';
z[13].style.right = ''+sz+ 'px';
z[14].style.left = ''+sz+ 'px';

var szz = $(".inner-container3").offset().top - $(".tall-container3").offset().top;
console.log(szz)
  $(".text-sec3").css("left", (window.innerWidth+($('.box-container5').width()*5))-szz);
});
}

section3();

function divsum(total, parts, min){

var minSum = parts * min;
var delta = total - minSum;
var r= [];
for(i=0; i<parts-1 ; i++){
r.push(Math.random());
}
var rr = r.sort((a,b)=>a-b);
var sr = [];
sr[0] = Math.ceil(rr[0]*delta);
var x = 0;
var k = 1;
for(var j=0; j<rr.length-1 ; j++){
x = Math.ceil((rr[k]-rr[j])*delta);
k++;
sr.push(x);
}
var l = sr.reduce((a, b) => a + b, 0);
var k = delta - l;
sr.push(k);
var fr = [];
for(var h=0; h<sr.length ; h++){
     fr.push(sr[h] + min);
	}
return(fr);
}

function shuffle(array) {
    for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [array[i], array[j]] = [array[j], array[i]];
    }
    return array;
}

//section 4


/**
 * Regex tested and matched against the following userAgents:
 * iPhone
 *   Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X)
 *   AppleWebKit/602.1.50 (KHTML, like Gecko)
 *   CriOS/56.0.2924.75 Mobile/14E5239e Safari/602.1
 * iPad
 *   Mozilla/5.0 (iPad; CPU OS 9_0 like Mac OS X)
 *   AppleWebKit/600.1.4 (KHTML, like Gecko)
 *   CriOS/45.0.2454.89 Mobile/13A344 Safari/600.1.4 (000205)
 */
 
const iOSChromeDetected = /CriOS/.test(navigator.userAgent);

if (iOSChromeDetected) {
  const getHeight = function getComputedHeightFrom(element) {
    const computedHeightString = getComputedStyle(element).height;
    const elementHeight = Number(computedHeightString.replace('px', ''));
    return elementHeight;
  };

  const calculateVh = function calculateVhFrom(elementHeight) {
    const approximateVh = (elementHeight / initialViewportHeight) * 100;
    const elementVh = Math.round(approximateVh);
    return elementVh;
  };

  const setDataAttribute = function setDataAttributeUsing(elementVh, element) {
    const dataAttributeValue = `${elementVh}`;
    element.setAttribute('data-vh', dataAttributeValue);
  };

  const setHeight = function setHeightBasedOnVh(element) {
    const landscape = orientation;
    const vhRatio = Number(element.dataset.vh / 100);
    if (landscape) {
      element.style.height = `${vhRatio * landscapeHeight}px`;
    } else {
      element.style.height = `${vhRatio * portraitHeight}px`;
    }
  };

  const initialize = function initializeDataAttributeAndHeight(element) {
    const elementHeight = getHeight(element);
    const elementVh = calculateVh(elementHeight);
    setDataAttribute(elementVh, element);
    setHeight(element);
  };

  const initialViewportHeight = window.innerHeight;
  const elements = Array.from(document.getElementsByClassName('vh-fix'));
  const statusBarHeight = 20;
  const portraitHeight = screen.height - statusBarHeight;
  const landscapeHeight = screen.width - statusBarHeight;

  window.onload = function() {
    window.addEventListener('orientationchange', function() {
      elements.forEach(setHeight);
    });

    elements.forEach(initialize);
  };
}



// DEMO

function createCols(container){
	if(window.innerWidth >768){
		for(i=0;  i<5; i++){
	var cols = document.createElement('div')
  cols.className = 'cols'
  document.querySelector('.'+container).appendChild(cols)
  
}
var q = document.querySelectorAll('.cols');
  var para = document.createElement("P");                       // Create a <p> node
var t = document.createTextNode("www.");      // Create a text node
para.appendChild(t);                                          // Append the text to <p>
q[1].appendChild(para); 
var para = document.createElement("P");                       // Create a <p> node
var t = document.createTextNode(".com");      // Create a text node
para.appendChild(t);                                          // Append the text to <p>
q[3].appendChild(para); 
}
else{
	for(i=0;  i<3; i++){
	var cols = document.createElement('div')
  cols.className = 'cols-mob'
  document.querySelector('.'+container).appendChild(cols)
}
var q = document.querySelectorAll('.cols-mob');
  var para = document.createElement("P");                       // Create a <p> node
var t = document.createTextNode("www.");      // Create a text node
para.appendChild(t);                                          // Append the text to <p>
q[0].appendChild(para); 
var para = document.createElement("P");                       // Create a <p> node
var t = document.createTextNode(".com");      // Create a text node
para.appendChild(t);                                          // Append the text to <p>
q[2].appendChild(para); 
}

var imgbg = document.querySelectorAll('.image');
var bgcol = ['#48d1cc','#5f9ea0','#8a2be2','#f0e68c','#7fffd4','#6495ed'];
for(var g=0; g<imgbg.length; g++){
   imgbg[g].style.background = ''+ bgcol[g]+'';
}
}
createCols('scroll-container4');

(function() {


  function easeOutQuad (t) {
    return t * (2 - t)
  }

  // Returns a random number (integer) between `min` and `max`
  function random (min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min
  }

  // Returns a random number as well, but it could be negative also
  function randomPositiveOrNegative (min, max) {
    return random(min, max) * (Math.random() > 0.5 ? 1 : -1)
  }

  // Set CSS `tranform` property for an element
  function setTransform (el, transform) {

    el.style.transform = transform
    el.style.WebkitTransform = transform
  }

  // Current scroll position
  var current = 0
  // Target scroll position
  var target = 0
  // Ease or speed for moving from `current` to `target`
  var ease = 0.075
  // Utility variables for `requestAnimationFrame`
  var rafId = undefined
  var rafActive = false
  // Container element
  
  // Variables for storing dimmensions
  var windowWidth, containerHeight, imageHeight

  // Variables for specifying transform parameters and limits
  var rotateXMaxList = []
  var rotateYMaxList = []
  var translateXMax = -200

  // Popullating the `rotateXMaxList` and `rotateYMaxList` with random values
  


  // Geeting dimmensions and setting up all for animation
  function setupAnimation (tcontainer, colcontainer, col) {
    // Updating dimmensions
    var container = document.querySelector('.'+colcontainer);
    var images = Array.prototype.slice.call(document.querySelectorAll('.'+col));
 
    windowWidth = window.innerWidth
    containerHeight = container.getBoundingClientRect().height+window.innerHeight;
    imageHeight = containerHeight / (windowWidth > 7060 ? images.length / 2 : images.length)
    // Set `height` for the fake scroll element
    //fakeScroll.style.height = containerHeight + 'px'
   document.querySelector('.'+tcontainer).style.height = containerHeight + 'px'
    // Start the animation, if it is not running already
    updateAnimation(colcontainer)
  }

  // Update scroll `target`, and start the animation if it is not running already
  function updateScroll (incontainer, tcontainer,colcontainer) {
    target = ((($('.'+incontainer).offset().top)) - $('.'+tcontainer).offset().top); 
   // startAnimation()
    updateAnimation(colcontainer)
  }

  // Start the animation, if it is not running already
  function startAnimation () {
    if (!rafActive) {
      rafActive = true
      rafId = requestAnimationFrame(updateAnimation)
    }
  }

  // Do calculations and apply CSS `transform`s accordingly
  function updateAnimation (colcontainer) {
    // Difference between `target` and `current` scroll position
     container = document.querySelector('.'+colcontainer);
    var diff = target - current
    // `delta` is the value for adding to the `current` scroll position
    // If `diff < 0.1`, make `delta = 0`, so the animation would not be endless
    var delta = Math.abs(diff) < 0.1 ? 0 : diff

    if (delta) { // If `delta !== 0`
      // Update `current` scroll position
      current += delta
      // Round value for better performance
      current = parseFloat(current.toFixed(2))
      // Call `update` again, using `requestAnimationFrame`
      //rafId = requestAnimationFrame(updateAnimation)
    } else { // If `delta === 0`
      // Update `current`, and finish the animation loop
      current = target
      
    }

    // Update images
    //updateAnimationImages()

    // Set the CSS `transform` corresponding to the custom scroll effect
    setTransform(container, 'translateY('+ -current +'px)')
  }

  // Calculate the CSS `transform` values for each `image`, given the `current` scroll position
  function updateAnimationImages () {
    // This value is the `ratio` between `current` scroll position and image's `height`
    var ratio = current / imageHeight
    // Some variables for using in the loop
    var intersectionRatioIndex, intersectionRatioValue, intersectionRatio
    var rotateX, rotateXMax, rotateY, rotateYMax, translateX

    // For each `image` element, make calculations and set CSS `transform` accordingly
    images.forEach(function (image, index) {
      // Calculating the `intersectionRatio`, similar to the value provided by
      // the IntersectionObserver API
      intersectionRatioIndex = windowWidth > 7060 ? parseInt(index / 2) : index
      intersectionRatioValue = ratio - intersectionRatioIndex
      intersectionRatio = Math.max(0, 1 - Math.abs(intersectionRatioValue))
      // Calculate the `rotateX` value for the current `image`
      rotateXMax = rotateXMaxList[index]
      rotateX = rotateXMax - (rotateXMax * intersectionRatio)
      rotateX = rotateX.toFixed(2)
      // Calculate the `rotateY` value for the current `image`
      rotateYMax = rotateYMaxList[index]
      rotateY = rotateYMax - (rotateYMax * intersectionRatio)
      rotateY = rotateY.toFixed(2)
      // Calculate the `translateX` value for the current `image`
      if (windowWidth > 7060) {
        translateX = translateXMax - (translateXMax * easeOutQuad(intersectionRatio))
        translateX = translateX.toFixed(2)
      } else {
        translateX = 0
      }
      
      // Invert `rotateX` and `rotateY` values in case the image is below the center of the viewport
      // Also update `translateX` value, to achieve an alternating effect
      if (intersectionRatioValue < 0) {
        rotateX = -rotateX
        rotateY = -rotateY
        translateX = index % 2 ? -translateX : 0
      } else {
        translateX = index % 2 ? 0 : translateX
      }
      // Set the CSS `transform`, using calculated values
      setTransform(image, 'perspective(500px) translateX('+ translateX +'px) rotateX('+ rotateX +'deg) rotateY('+ rotateY +'deg)')
    })
  }


  //updateAnimation ('imgcol')
  // Listen for `resize` event to recalculate dimmensions
  window.addEventListener('resize', function(){setupAnimation('tall-container4','imgcol', 'image')}, false)
  // Listen for `scroll` event to update `target` scroll position
  window.addEventListener('scroll', function(){updateScroll('inner-container4','tall-container4','imgcol')}, false)
  // Initial setup
  setupAnimation('tall-container4','imgcol', 'image')
//section 6
  window.addEventListener('resize', function(){setupAnimation('tall-container6','textcol', 'texts6')}, false)
  // Listen for `scroll` event to update `target` scroll position
  window.addEventListener('scroll', function(){updateScroll('inner-container6','tall-container6','textcol')}, false)
  // Initial setup
  setupAnimation('tall-container6','textcol', 'texts6')



})()


//section 7
function section7 (){

//var leftarr  =[];
var b7 = document.querySelectorAll(".text-sec7");
var theight = $(".text-sec7").height();
var pos = [];
for( var d=0 ; d<b7.length ; d++){
   var fsize = getRandomIntInclusive(60, 120)
   b7[d].style.fontSize = ''+fsize+ 'px';
 }
//fix font-size on longest word
  b7[2].style.fontSize = '100px';

for( var d=0 ; d<b7.length ; d++){

  if((d+1)%2 == 0){
	var leftnum = getRandomIntInclusive((window.innerWidth + b7[2].offsetWidth), window.innerWidth*2);
	b7[d].style.left = ''+leftnum+ 'px';
  b7[d].style.top = ''+theight+ 'px';
  pos.push(leftnum);
}
else{
  b7[d].style.top = ''+theight+ 'px';
  var leftnum = getRandomIntInclusive(b7[2].offsetWidth,(window.innerWidth + b7[2].offsetWidth));
  b7[d].style.left = '-'+leftnum+'px';
  leftnum = - leftnum;
  pos.push(leftnum);
}
theight += $(".text-sec7").height();
	}

var maxpos = (Math.max(...pos));
var minpos = -(Math.min(...pos));
  
$(".tall-container7").css("height", (minpos + maxpos)+b7[2].offsetWidth);
 
$(window).on('scroll', function() {
var x7 = ((($(".inner-container7").offset().top)) - $(".tall-container7").offset().top); 
b7[0].style.left = ''+(pos[0]+x7)+ 'px';
b7[1].style.left = ''+(pos[1]-x7)+ 'px';
b7[2].style.left = ''+(pos[2]+x7)+ 'px';
b7[3].style.left = ''+(pos[3]-x7)+ 'px';
b7[4].style.left = ''+(pos[4]+x7)+ 'px';
b7[5].style.left = ''+(pos[5]-x7)+ 'px';
b7[6].style.left = ''+(pos[6]+x7)+ 'px';
b7[7].style.left = ''+(pos[7]-x7)+ 'px';
b7[8].style.left = ''+(pos[8]+x7)+ 'px';


});

}
section7 ();

function getRandomIntInclusive(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1) + min); //The maximum is inclusive and the minimum is inclusive
}



//section5
var hg = $(".text-sec5").height();
$(".text-sec5").css("bottom", - hg);
$(window).on('scroll', function() {
var x5 = ((($(".inner-container5").offset().top)) - $(".tall-container5").offset().top); 
$(".text-sec5").css("bottom",(-hg*2 + x5)/3);
$(".s5col-1").css("height", Math.round((x5)/1.5));
          $(".s5col-2").css("height", (x5)/1.2);
          $(".s5col-3").css("height", Math.round((x5)/1.5));
          $(".s5col-4").css("height", Math.round((x5)/1.8));
          $(".s5col-5").css("height", (x5));
        


});


//section6

/*$(".tall-container6").css("height", ($(".textcol").height()+ window.innerHeight)*4);
$(window).on('scroll', function() {
var x6 = ((($(".inner-container6").offset().top)) - $(".tall-container6").offset().top); 
$(".textcol").css("top", -x6/4);

});*/

//font-sizes for mobile

var pixelRatio = window.devicePixelRatio || 1;
$(".text-sec5").css("font-size", 250/pixelRatio);
$(".text-s6col2").css("font-size", 40/pixelRatio);
$(".texts6").css("font-size", 90/pixelRatio);



});
